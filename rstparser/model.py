#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-

"""Parsing model, which includes the following functions
1. Mini-batch training on the data generated by the Data class
2. Shift-Reduce RST parsing for a given text sequence
3. Save/load parsing model

"""

##################################################################
# Imports
from __future__ import absolute_import, print_function, unicode_literals

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction import DictVectorizer
from sklearn.svm import LinearSVC

import numpy as np


##################################################################
# Constants
DFLT_C = 0.02
DFLT_CLS_WGHT = None
DFLT_PARAMS = {"class_weight": DFLT_CLS_WGHT, "loss": "hinge",
               "penalty": "l1", "dual": True, "multi_class": "crammer_singer"}


##################################################################
# Classes
class Model(object):
    def __init__(self, clf=None):
        """ Initialization

        :type clf: LinearSVC
        :param clf: a multiclass classifier or None
        """
        classifier = clf or LinearSVC(C=DFLT_C, **DFLT_PARAMS)
        self.clf = Pipeline([("vect", DictVectorizer()),
                             ("clf", classifier)])

    def reset(self):
        """Set all unpickable components to None.

        """
        pass

    def restore(self):
        """Restore all components that were reset at pickling.

        """
        pass

    def train(self, trnM, trnL):
        """ Perform batch-learning on parsing model.

        """
        raise NotImplementedError
        self.clf.fit(trnM, trnL)

    def predict(self, seg1, seg2, seg3):
        """Predict parsing action for a given set of features.

        """
        feats = self.extract_features()
        predicted_output = self.clf.decision_function(feats)
        idxs = np.argsort(predicted_output[0])[::-1]
        return idxs

    def extract_features(self, segment, tree):
        """Predict parsing action for a given set of features.

        """
        raise NotImplementedError
