#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-

##################################################################
# Imports
from __future__ import absolute_import, print_function, unicode_literals

from data import Data
from model import ParsingModel
from cPickle import load
from util import reversedict
from evalparser import evalparser
import gzip
import os

##################################################################
# Constants
M_TRAIN = "train"
M_TEST = "test"
M_EVAL = "evauate"
DFLT_MODEL_PATH = os.path.join(os.path.basename(__FILE__),
                               "rstpaser.model")


##################################################################
# Methods
def _add_cmn_options(parser):
    """Add common options to option subparser

    Args:
      parser (argparse.ArgumentParser):
        option subparser to which new options should be added

    Returns:
      void:

    """
    parser.add_argument("-m", "--model",
                        help="path to the main model (if different from"
                        " default)", type=str, default=DFLT_MODEL_PATH)
    parser_train.add_argument(
        "file", help="input files", nargs='+'
    )


def createdata(path):
    """ Create training data by calling the Data class

    :type path: string
    :param path: path to the training document folder
    """
    data = Data()
    data.builddata(path)
    # Change the threshold if you want to filter
    #   out the low-frequency features
    data.buildvocab(thresh=1)
    data.buildmatrix()
    data.savematrix("training-data.pickle.gz")
    data.savevocab("vocab.pickle.gz")


def trainmodel():
    """ Training a model with data and save it into file
    """
    fvocab = "vocab.pickle.gz"
    fdata = "training-data.pickle.gz"
    D = load(gzip.open(fvocab))
    vocab, labelidxmap = D['vocab'], D['labelidxmap']
    D = load(gzip.open(fdata))
    trnM, trnL  = D['matrix'], D['labels']
    idxlabelmap = reversedict(labelidxmap)
    pm = ParsingModel(vocab=vocab, idxlabelmap=idxlabelmap)
    pm.train(trnM, trnL)
    pm.savemodel("parsing-model.pickle.gz")


def main(argv):
    """Main method for training, evaluating, and testing an RST pasrer.

    Args:
      argv (list[str]): CLI arguments

    Returns:
      int: 0 on success, non-0 otherwise

    """
    from argparse import ArgumentParser
    argparser = ArgumentParser(
        description="Script for training and testing RST"
        " parser of Ji and Eisenstein (2014)"
    )
    subparsers = argparser.add_subparsers(
        help="type of operation to perform", dest="mode"
    )
    parser_train = subparsers.add_parser(
        M_TRAIN, help="train new model on the provided data"
    )
    _add_cmn_options(parser_train)
    parser_test = subparsers.add_parser(
        M_TEST, help="test trained model on the provided data"
    )
    _add_cmn_options(parser_test)
    parser_eval = subparsers.add_parser(
        M_EVAL, help="evaluate the results"
    )
    args = argparser.aprse_args(argv)
    if args.mode == M_TRAIN:
        pass


##################################################################
# Main
if __name__ == '__main__':
    # Create data for offline training
    print 'Create data ...'
    createdata(path="./examples")
    # Train a parsing model
    print 'Training a parsing model ...'
    trainmodel()
    # Evaluate on dev/test documents
    print 'Evaluating the parsing performance ...'
    evalparser(path='./examples', report=True)
