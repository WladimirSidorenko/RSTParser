#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-

##################################################################
# Imports
from __future__ import absolute_import, print_function, unicode_literals

from glob import iglob
import codecs
import logging
import os
import sys

from rstparser.conll import CoNLLDoc
from rstparser.tree import RSTTree
from rstparser.utils import DFLT_ENCODING, LOGGER
from rstparser.parser import RSTParser


##################################################################
# Constants
M_TRAIN = "train"
M_TEST = "test"
M_EVAL = "evauate"
DFLT_MODEL_PATH = os.path.join(os.path.basename(__file__),
                               "rstpaser.model")


##################################################################
# Methods
def _add_cmn_options(parser):
    """Add common options to option subparser

    Args:
      parser (argparse.ArgumentParser):
        option subparser to which new options should be added

    Returns:
      void:

    """
    parser.add_argument("-m", "--model",
                        help="path to the main model (if different from"
                        " default)", type=str, default=DFLT_MODEL_PATH)
    parser.add_argument(
        "dis_dir",
        help="directory containing files with RST trees in dis format"
    )
    parser.add_argument(
        "conll_dir",
        help="directory containing syntactic parse trees in CoNLL format"
    )


def read_data(dis_dir, conll_dir):
    """Read RST tree for dis file and corresponding parse trees from CoNLL.

    :param str dis_dir: path to the directoty containing dis files
    :param str conll_dir: path to the directoty containing CoNLL files

    """
    for dis_fname in iglob(os.path.join(dis_dir, "*.dis")):
        LOGGER.debug("Analyzing dis file %s", dis_fname)
        conll_fname = os.path.join(
            conll_dir,
            os.path.splitext(os.path.basename(dis_fname))[0] + ".conll"
        )
        if (not os.path.exists(conll_fname)
                or not os.access(conll_fname, os.R_OK)):
            LOGGER.debug("Cannot read CoNLLx file %s (skipping)", conll_fname)
            continue
        with codecs.open(conll_fname, 'r', DFLT_ENCODING) as ifile:
            conll_doc = CoNLLDoc(ifile)
        with codecs.open(dis_fname, 'r', DFLT_ENCODING) as ifile:
            T = RSTTree(ifile.read(), conll_doc)
        print(repr(T))
        print(str(T))
        print(repr(T.generate_samples()))
    sys.exit(66)


def main(argv):
    """Main method for training, evaluating, and testing an RST pasrer.

    Args:
      argv (list[str]): CLI arguments

    Returns:
      int: 0 on success, non-0 otherwise

    """
    from argparse import ArgumentParser
    argparser = ArgumentParser(
        description="Script for training and testing RST"
        " parser of Ji and Eisenstein (2014)"
    )
    argparser.add_argument("-v", "--verbose",
                           help="output debug information",
                           action="store_true")
    subparsers = argparser.add_subparsers(
        help="type of operation to perform", dest="mode"
    )
    parser_train = subparsers.add_parser(
        M_TRAIN, help="train new model on the provided data"
    )
    _add_cmn_options(parser_train)
    parser_test = subparsers.add_parser(
        M_TEST, help="test trained model on the supplied data"
    )
    _add_cmn_options(parser_test)
    parser_eval = subparsers.add_parser(
        M_EVAL, help="evaluate the results"
    )
    parser_eval.add_argument("gold", help="file or directory containing gold"
                             " data")
    parser_eval.add_argument("predicted",
                             help="file or directory containing automatically"
                             " labeled data")
    args = argparser.parse_args(argv)

    if args.verbose:
        log_lvl = logging.DEBUG
        LOGGER.setLevel(log_lvl)
        for handler_i in LOGGER.handlers:
            handler_i.setLevel(log_lvl)

    if args.mode == M_TRAIN:
        LOGGER.debug("Training RST parser...")
        parser = RSTParser([], [], None)
        parser.train([rst_tree
                      for rst_tree in read_data(args.dis_dir, args.conll_dir)])
        parser.save(args.model)
        LOGGER.debug("Training RST parser... done")
    elif args.mode == M_TEST:
        LOGGER.debug("Testing RST parser...")
        parser = RSTParser(args.model)
        parser.train(args.files)
        parser.save(args.model)
        LOGGER.debug("Testing RST parser... done")
    else:
        raise NotImplementedError


##################################################################
# Main
if __name__ == '__main__':
    main(sys.argv[1:])
