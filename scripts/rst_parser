#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-

##################################################################
# Imports
from __future__ import absolute_import, print_function, unicode_literals

from dsegmenter.common import read_segments
from glob import glob, iglob
from six import iteritems
import codecs
import logging
import os
import sys

from rstparser.conll import CoNLLDoc
from rstparser.evaluation import Metrics
from rstparser.node import SpanNode
from rstparser.parser import RSTParser
from rstparser.tree import RSTTree
from rstparser.utils import DFLT_ENCODING, DFLT_MODEL_PATH, LOGGER


##################################################################
# Constants
M_TRAIN = "train"
M_TEST = "test"
M_EVAL = "evaluate"


##################################################################
# Methods
def _add_cmn_options(parser, dis_dir="dis_dir",
                     dis_dir_description="directory containing files"
                     " with RST trees in dis format"):
    """Add common options to option subparser

    :param argparse.ArgumentParser parser: option subparser to which
      new options should be added

    Returns:
      void:

    """
    parser.add_argument("-m", "--model",
                        help="path to the main model (if different from"
                        " default)", type=str, default=DFLT_MODEL_PATH)
    parser.add_argument(dis_dir, help=dis_dir_description)
    parser.add_argument(
        "conll_dir",
        help="directory containing syntactic parse trees in CoNLL format"
    )


def read_dis_data(dis_dir, conll_dir):
    """Read RST tree from dis file and corresponding parse trees from CoNLL.

    :param str dis_dir: path to the directory containing dis files
    :param str conll_dir: path to the directoty containing CoNLL files

    """
    for dis_fname in iglob(os.path.join(dis_dir, "*.dis")):
        LOGGER.debug("Analyzing dis file %s", dis_fname)
        conll_fname = os.path.join(
            conll_dir,
            os.path.splitext(os.path.basename(dis_fname))[0] + ".conll"
        )
        if (not os.path.exists(conll_fname)
                or not os.access(conll_fname, os.R_OK)):
            LOGGER.debug("Cannot read CoNLL file %s (skipping)", conll_fname)
            continue
        with codecs.open(conll_fname, 'r', DFLT_ENCODING) as ifile:
            conll_doc = CoNLLDoc(ifile)
        with codecs.open(dis_fname, 'r', DFLT_ENCODING) as ifile:
            yield (dis_fname, RSTTree(ifile.read(), conll_doc))


def read_edu_data(edu_dir, conll_dir):
    """Read elementary discourse units and corresponding parse trees from CoNLL.

    :param str edu_dir: path to the directory containing EDU files
    :param str conll_dir: path to the directoty containing CoNLL files

    """
    for edu_fname in iglob(os.path.join(edu_dir, "*.edu")):
        LOGGER.debug("Analyzing EDU file %s", edu_fname)
        conll_fname = os.path.join(
            conll_dir,
            os.path.splitext(os.path.basename(edu_fname))[0] + ".conll"
        )
        if (not os.path.exists(conll_fname)
                or not os.access(conll_fname, os.R_OK)):
            LOGGER.debug("Cannot read CoNLL file %s (skipping)", conll_fname)
            continue
        with codecs.open(conll_fname, 'r', DFLT_ENCODING) as ifile:
            conll_doc = CoNLLDoc(ifile)
        with codecs.open(edu_fname, 'r', DFLT_ENCODING) as ifile:
            toks2segs = read_segments(ifile)
        # construct a list of segments which will be fed in to the parser
        queue = [None] * len(toks2segs)
        n_seg_toks = sum(len(toks) for toks in toks2segs)
        n_conll_toks = len(conll_doc.tokendict)
        if n_seg_toks != n_conll_toks:
            LOGGER.error(
                "Different number of tokens in dis and conll files: %d vs %d",
                n_seg_toks, n_conll_toks
            )
            sys.exit(1)
        edudict = conll_doc.edudict
        for toks, (seg_idx, seg_label) in iteritems(toks2segs):
            tok_idcs = [tok_idx for tok_idx, _ in toks]
            seg = SpanNode("")
            queue[seg_idx] = seg
            seg_idx += 1
            seg.nucedu = seg_idx
            seg.nucspan = (seg_idx, seg_idx)
            seg.eduspan = (seg_idx, seg_idx)
            seg.text = tok_idcs
            seg.text.sort()
            edudict[seg_idx] = seg.text[:]
        yield (edu_fname, queue, conll_doc)


def read_trees(data):
    """Read RST trees fom file or directory.

    :param data: file or directory to read the data from

    """
    if os.path.isfile(data):
        flist = [data]
    else:
        flist = glob(os.path.join(data, '*'))
    for fname in flist:
        with codecs.open(fname, 'r', DFLT_ENCODING) as ifile:
            yield RSTTree(ifile.read())


def main(argv):
    """Main method for training, evaluating, and testing an RST pasrer.

    Args:
      argv (list[str]): CLI arguments

    Returns:
      int: 0 on success, non-0 otherwise

    """
    from argparse import ArgumentParser
    argparser = ArgumentParser(
        description="Script for training and testing RST"
        " parser of Ji and Eisenstein (2014)"
    )
    argparser.add_argument("-v", "--verbose",
                           help="output debug information",
                           action="store_true")
    subparsers = argparser.add_subparsers(
        help="type of operation to perform", dest="mode"
    )

    parser_train = subparsers.add_parser(
        M_TRAIN, help="train new model on the provided data"
    )
    _add_cmn_options(parser_train)

    parser_test = subparsers.add_parser(
        M_TEST, help="test trained model on the supplied data"
    )
    _add_cmn_options(parser_test, "edu_dir",
                     "directory containing files with EDUs")
    parser_test.add_argument(
        "out_dir",
        help="directory for storing resulting syntactic trees"
    )

    parser_eval = subparsers.add_parser(
        M_EVAL, help="evaluate the results"
    )
    parser_eval.add_argument("gold", help="file or directory containing gold"
                             " data")
    parser_eval.add_argument("predicted",
                             help="file or directory containing automatically"
                             " labeled data")
    args = argparser.parse_args(argv)

    if args.verbose:
        log_lvl = logging.DEBUG
        LOGGER.setLevel(log_lvl)
        for handler_i in LOGGER.handlers:
            handler_i.setLevel(log_lvl)

    if args.mode == M_TRAIN:
        LOGGER.info("Training RST parser...")
        parser = RSTParser([], [], None)
        parser.train([rst_tree
                      for _, rst_tree in read_dis_data(
                              args.dis_dir, args.conll_dir)])
        parser.save(args.model)
        LOGGER.info("Training RST parser... done")
    elif args.mode == M_TEST:
        LOGGER.debug("Testing RST parser...")
        parser = RSTParser([], [], args.model)
        for edu_fname, edus, conll_doc in read_edu_data(args.edu_dir,
                                                        args.conll_dir):
            out_fname = os.path.join(
                args.out_dir,
                os.path.splitext(os.path.basename(edu_fname))[0] + ".dis"
            )
            with codecs.open(out_fname, 'w', DFLT_ENCODING) as ofile:
                rst_tree = parser.parse(edus, conll_doc)
                ofile.write(rst_tree.to_str(conll_doc))
        LOGGER.debug("Testing RST parser... done")
    elif args.mode == M_EVAL:
        metrics = Metrics()
        for gld_tree, pred_tree in zip(read_trees(args.gold),
                                       read_trees(args.predicted)):
            metrics.eval(gld_tree, pred_tree)
        metrics.report()
    else:
        raise NotImplementedError


##################################################################
# Main
if __name__ == '__main__':
    main(sys.argv[1:])
